{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","quote","author","fetched","twitterLink","fetchQuote","bind","fetch","then","response","ok","Error","json","data","setState","this","console","error","id","className","href","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"8TAmFeA,G,wDA9Eb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MAAO,GACPC,OAAQ,GACRC,SAAS,EACTC,YAAa,IAEf,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBARD,E,oLAaH,mD,kBAGNC,MAHM,oDAITC,MAAK,SAAAC,GACF,IAAmB,IAAhBA,EAASC,GACV,MAAM,IAAIC,MAAM,mBAEhB,OAAOF,EAASG,UAGrBJ,MAAK,SAAAK,GACJ,EAAKC,SAAS,CACZb,MAAOY,EAAKZ,MACZC,OAAQW,EAAKX,OACbC,SAAS,EACTC,YAAY,yCAAD,OAA2CS,EAAKZ,MAAhD,cAA2DY,EAAKX,a,uDAIjFa,KAAKD,SAAS,CACZb,MAAM,8CACNC,OAAQ,eACRC,SAAS,IAEXa,QAAQC,MAAM,mB,yJAKhBF,KAAKV,e,+BAIL,OACE,0BAAMa,GAAG,YAAYC,UAAU,aAC7B,gCAAYA,UAAU,UACM,IAAvBJ,KAAKf,MAAMG,QACR,uDACA,KAEN,uBAAGe,GAAG,OAAOC,UAAU,cACpBJ,KAAKf,MAAMC,OAEd,0BAAMiB,GAAG,SAASC,UAAU,gBAA5B,MAA+CJ,KAAKf,MAAME,SAE5D,4BAAQiB,UAAU,iBACZ,uBAAGC,KAAML,KAAKf,MAAMI,YAClBc,GAAG,cACHC,UAAU,eAEV,uBAAGA,UAAU,oBAEnB,4BAAQD,GAAG,YAAYC,UAAU,YAAYE,QAASN,KAAKV,YAA3D,mB,GAnEQiB,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdC,OAAM,SAAAtB,GACLD,QAAQC,MAAMA,EAAMuB,c","file":"static/js/main.a8966ebe.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quote: '',\n      author: '',\n      fetched: false,\n      twitterLink: ''\n    }\n    this.fetchQuote = this.fetchQuote.bind(this)\n  }\n\n  \n  async fetchQuote() {\n    let request = 'http://quotes.stormconsultancy.co.uk/random.json'\n    \n    try {\n      await fetch(request)\n        .then(response => {\n            if(response.ok !== true) {\n              throw new Error('Network Failure') \n            } else {\n              return response.json()\n            }\n          })\n        .then(data => {\n          this.setState({\n            quote: data.quote,\n            author: data.author,\n            fetched: true,\n            twitterLink: `https://twitter.com/intent/tweet?text=${data.quote} --${data.author}`\n          })\n        }) \n    } catch (error) {\n      this.setState({\n        quote: `\"Okay, Houston, we've had a problem here.\"`,\n        author: \"Jack Swigert\",\n        fetched: false\n      })\n      console.error('Network Failure')\n    }  \n  }\n\n  componentDidMount() {\n    this.fetchQuote()\n  }\n\n  render() {\n    return(\n      <main id=\"quote-box\" className=\"quote-box\">\n        <blockquote className=\"quote\">\n            {this.state.fetched === false\n              ? <h2>A not so random message</h2>\n              : null\n            }\n          <p id=\"text\" className=\"quote-text\">\n            {this.state.quote}\n          </p>\n          <cite id=\"author\" className=\"quote-author\">-- {this.state.author}</cite>\n        </blockquote>\n        <footer className=\"quote-options\">\n              <a href={this.state.twitterLink} \n                id=\"tweet-quote\" \n                className=\"social-link\"\n              >\n                <i className=\"fab fa-twitter\"></i>\n              </a>\n          <button id=\"new-quote\" className=\"new-quote\" onClick={this.fetchQuote}>\n            New Quote\n          </button>\n        </footer>\n      </main>\n    )\n  }\n}\n\n\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}